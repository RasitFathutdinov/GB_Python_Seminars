
"""
# Урок 6. Ускоренная обработка данных: lambda, filter, map, zip, enumerate, list comprehension. 
# Продолжение
# Задача: предложить улучшения кода для уже решённых задач:
# С помощью использования лямбд, filter, map, zip, enumerate, list comprehension, reduce
"""

# ****************************************************************
# 0 - дорешать задачу с семинара(она в обсуждениях)
# ****************************************************************
"""
# Задание с семинара
# Напишите программу вычисления арифметического выражения заданного строкой.
# Используйте операции +,-,/,. приоритет операций стандартный.
# Дополнительное задание: Добавьте возможность использования скобок, меняющих приоритет операций
# *Пример:
# 2+2 => 4;
# 1+2*3 => 7;
# 10/2*5 => 25;
# 10 * 5 * => недостаточно числовых данных
# -5 + 5 => 0
# два + три => неправильный ввод: нужны числа
# (2+((5-3)*(16-14)))/3 => 2
# (256 - 194 => некорректная запись скобок
"""
#       <->       <->
#   <-> <-> <->  <-> <-> 
#   [1, '+', 21,  '*', 3]
from decimal import DivisionByZero
from logging import raiseExceptions

# определение операций калькулятора
our_add = lambda lst, rst: lst + rst
our_sub = lambda lst, rst: lst - rst
our_mult = lambda lst, rst: lst * rst
our_div = lambda lst, rst:  lst / rst if  rst != 0 else raiseExceptions(DivisionByZero)
our_pow = lambda lst, rst: lst ** rst
# def our_add(numl, numr):
#     return numl + numr
# def our_sub(numl, numr):
#     return numl - numr 
# def our_mult(numl, numr):
#     return numl * numr
# def our_div(numl, numr):
#     return numl / numr 
# def our_pow(numl, numr):
#     return numl ** numr 
list_of_operator  = ['**', '/', '//', '%', '*', '+', '-']
list_of_prioritet = [   1,  2,    2,   2,    2,   3,   3]
out_dict= dict(zip(list_of_operator, list_of_prioritet))
print(f"\nОператоры и приоритет -> {out_dict}")
our_expression = "1 + 21*   3"
# парсинг в лоб без левой и првой нотации и разделения операторв/операндов
temp_val_digit = ''
our_expr_list = []
len_expr = len(our_expression)
for index in range(0, len_expr):
    if(our_expression[index].isdigit()):
        temp_val_digit += our_expression[index] # копим цифры 0-9, как будет граница числа, сохраняем
        if(index < len_expr-1): 
            if (not our_expression[index+1].isdigit()): # число из многих чисел
                our_expr_list.append(int(temp_val_digit))
        else:
            our_expr_list.append(int(temp_val_digit))        # число из одной цифры
    if(our_expression[index] in list_of_operator):
        our_expr_list.append(our_expression[index])
        temp_val_digit = ''
        temp_val_operator = our_expression[index] # операторы +, -, /, *
print(" Выражение -> " + our_expression)
print(f"Парсинг -> {our_expr_list}")


# # Далее логика пробег по словарю с крошением списка-выражения
# # Реализация скобок - это рекурсия по срезу от первой "(" до последней ")"
# for elem in our_expr_list:
#     while elem.key in our_expr_list:
#         # преобразовать список our_expr_list с удвлением первого встречного
#         # * и расчётом слева и сраправа стоящим
#         # т.е. сокращение списка на 3 позиции (2 числа и оператор) через remove
#         # результат в список через insert
#         if key = '*'
#             our_mult( , )
#         elif key = '/'
#             our_div( , )
#         elif key = '+'
#             our_sum( , )
#         elif key = '-'
#             our_sub( , )


# ***********************************************************************
# 1 - Определить, присутствует ли в заданном списке строк, некоторое число
# ***********************************************************************






# ***********************************************************************
# 2- Найти сумму чисел списка стоящих на нечетной позиции
# ***********************************************************************



# *********************************************************************************
# 3- Найти расстояние между двумя точками пространства(числа вводятся через пробел)
# *********************************************************************************




# *********************************************************************************
# 4- Определить, позицию второго вхождения строки в списке либо сообщить, что её нет.
# Примеры
# список: ["qwe", "asd", "zxc", "qwe", "ertqwe"], ищем: "qwe", ответ: 3
# список: ["йцу", "фыв", "ячс", "цук", "йцукен", "йцу"], ищем: "йцу", ответ: 5
# список: ["йцу", "фыв", "ячс", "цук", "йцукен"], ищем: "йцу", ответ: -1
# список: ["123", "234", 123, "567"], ищем: "123", ответ: -1
# список: [], ищем: "123", ответ: -1
# *********************************************************************************





# *********************************************************************************
# 5- Найти произведение пар чисел в списке. Парой считаем первый и последний элемент, 
# второй и предпоследний и т.д.
# *********************************************************************************





# *********************************************************************************
# 6-Сформировать список из N членов последовательности.
# Для N = 5: 1, -3, 9, -27, 81 и т.д.
# *********************************************************************************
# ****************************************
# 1. Напишите программу, которая принимает на вход два числа и проверяет, является ли одно число квадратом другого.
# Примеры:
# 5, 25 -> да
# 4, 16 -> да
# 25, 5 -> да
# 8,9 -> нет

# Решение - Вариант 1 
# x = int(input('Введите первое число: '))
# y = int(input('Введите второе число: '))
# print(f'{x}, {y}', end= ' -> ')
# if y == x ** 2 or x == y ** 2:
#     print('да')
# else:
    # print('нет')

# Решение - Вариант 2 (через подпрограммы/функции) 
# определение функции
# def is_number_power(x, y):  
# ##def is_number_power(x: int, y: int) -> bool: - если чётко задать тип возвращаемого результата
#     if y == x ** 2 or x == y ** 2:
#         return f'{x}, {y} -> да'
#     else:
#         return f'{x}, {y} -> нет'
# тело 
# x = int(input('Введите первое число: '))
# y = int(input('Введите второе число: '))
# print(is_number_power(x, y))


# ****************************************
# 2. Напишите программу, которая на вход принимает 5 чисел и находит максимальное из них.
# Примеры:
# 1, 4, 8, 7, 5 -> 8
# 78, 55, 36, 90, 2 -> 90
# ****************************************

# Решение - Вариант 1 - через ввод с консоли и цикл while
# i = 1
# a = list(range(1,6)) #a = list(range(5))
# while i <= 5:
#     number = input(f'Введите {i}-е число + enter: ')
#     a[i-1] = number
#     if i == 1: 
#         max = number
#     elif number > max:
#         max = number
#     i += 1
# print(f'max = {max}')

# Решение - Вариант 2 - через ввод с консоли и цикл while
# from random import randint    # подключаем библиотеку
# numbers = [randint(1, 100) for i in range(5)]
# max = numbers[0]              # первый элемент ложим в max
# for i in numbers[1:]:         # просматриваем с 2-го элемента
#     if i > max:              
#         max = i
# print(f'{numbers} -> {max}')


# #****************************************
# 3. Напишите программу, которая будет на вход принимать число N 
# и выводить числа от -N до N
# Примеры:
# 5 -> -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5
# ****************************************

# Решение - Вариант 1 - Стремление к форматированному выводу как в условии
# N = int(input(f'Введите число N + enter: '))
# i = -1*N                      # тоже, что и унарный минус -N
# print(f'{N} -> ', end = '')   # вывод: "5 -> "
# while i < N:                  # i<N, так как в else вывод N
#     print(f'{i}, ', end = '') # вывод: "-5, -4, -3, -2, -1, 0, 1, 2, 3, 4,"
#     i = i + 1                 # приращение счётчика (числа)
# else:
#     print(f'{N}')             # вывод: "5"
# Решение - Вариант 2 - Быстрое и короткое решение
# number = int(input('Введите число'))
# a = list(range(-number, number+1))
# print(a)


# 4. Напишите программу, которая будет принимать на вход дробь 
# и показывать первую цифру дробной части числа.
# Примеры:
# 6,78 -> 7
# 5 -> нет
# 0,34 -> 3
# ****************************************

# Решение - Вариант 1
# x = float(input('Введите дробное число: '))
# x = x * 10
# x = x % 10
# print(int(x))
# Решение - Вариант 2 с проверкой на отсусвие дробной части (5 -> нет)
# x = float(input('Введите дробное число: '))
# if x == int(x):
#     x = int(x)
#     y = 'нет'
# else:
#     y = int(x * 10 % 10)
# print(f'{x} -> {y}')


# ****************************************
# Напишите программу, которая принимает на вход число и проверяет, 
# кратно ли оно 5 и 10 или 15, но не 30.
# ((5 и 10) или 15), но не 30
# ****************************************

# Решение - Вариант 1
# N = int(input(f'Введите число: '))
# if (N % 5 == 0 and N % 10 == 0 or N % 15 == 0) and not(N % 30 == 0):
#     print('да')
# else:
#     print('нет')
# Решение - Вариант 2
# x=int(input('введите число  '))
# if ((x%5==0 and x%10==0) or x%15==0) and x%30!=0:
#     print('true')
# else:
#     print('false')


# ****************************************
# Доп 4. Пользователь вводит целое положительное число. 
# Найдите самую большую цифру в числе. 
# Для решения используйте цикл while и арифметические операции.
# ****************************************
# a = int(input())
# max = 0
# while a > 0:
#     num = a % 10
#     if num > max:
#         max = num
#     a //= 10
# print(max)


# Допы
# 3. Узнайте у пользователя число n. Найдите сумму чисел n + nn + nnn. Например, пользователь ввёл число 3. Считаем 3 + 33 + 333 = 369.
# 4. Пользователь вводит целое положительное число. Найдите самую большую цифру в числе. Для решения используйте цикл while и арифметические операции.
# 5. Запросите у пользователя значения выручки и издержек фирмы. Определите, с каким финансовым результатом работает фирма. Например, прибыль — выручка больше издержек, или убыток — издержки больше выручки. Выведите соответствующее сообщение.
# 6. Если фирма отработала с прибылью, вычислите рентабельность выручки. Это отношение прибыли к выручке. Далее запросите численность сотрудников фирмы и определите прибыль фирмы в расчёте на одного сотрудника.
# 7. Спортсмен занимается ежедневными пробежками. В первый день его результат составил a километров. Каждый день спортсмен увеличивал результат на 10% относительно предыдущего. Требуется определить номер дня, на который результат спортсмена составит не менее b километров. Программа должна принимать значения параметров a и b и выводить одно натуральное число — номер дня.
# Например: a = 2, b = 3.
# Результат:
# 1-й день: 2
# 2-й день: 2,2
# 3-й день: 2,42
# 4-й день: 2,66
# 5-й день: 2,93
# 6-й день: 3,22
# Ответ: на шестой день спортсмен достиг результата — не менее 3 км.



# ДЗ:
# Напишите программу, которая принимает на вход цифру, обозначающую день недели, и проверяет, является ли этот день выходным.
# Пример:
# 6 -> да
# 7 -> да
# 1 -> нет
# Напишите программу для. проверки истинности утверждения ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат.
# Напишите программу, которая принимает на вход координаты точки (X и Y), причём X ≠ 0 и Y ≠ 0 и выдаёт номер четверти плоскости, в которой находится эта точка (или на какой оси она находится).
# Пример:
# x=34; y=-30 -> 4
# x=2; y=4-> 1
# x=-34; y=-30 -> 3
# Напишите программу, которая по заданному номеру четверти, показывает диапазон возможных координат точек в этой четверти (x и y).
# Напишите программу, которая принимает на вход координаты двух точек и находит расстояние между ними в 2D пространстве.
# Пример:
# A (3,6); B (2,1) -> 5,09
# A (7,-5); B (1,-1) -> 7,21





